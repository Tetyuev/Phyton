# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
# Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
# Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv
script_name, vyrabotka, stavka, premiya = argv
print("Зарплата =", float(vyrabotka)*float(stavka)+float(premiya))  # Ввод в командную строку  python Lesson_4.py 100 8 50  выдаст   Зарплата = 850.0

# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

list1 = [13, 60, 47, 84, 21, 7, 47, 48, 49, 50]
list2 = []
for i in range(len(list1)-1):
    if list1[i+1]>list1[i]:
        list2.append(list1[i+1])
print(list2)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.

num_list = [el for el in range(20,241) if el % 20 == 0 or el % 21 == 0]
print(num_list)

# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений.
# Сформируйте итоговый массив чисел, соответствующих требованию.
# Элементы выведите в порядке их следования в исходном списке.
# Для выполнения задания обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

whole_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [el for el in whole_list if whole_list.count(el)==1]
print(new_list)

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти чётные числа от 100 до 1000 (включая границы).
# Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce
my_list = [el for el in range(100,1001,2)]
def my_func(prev_el, el):
    return prev_el*el
print(reduce(my_func, my_list))

# 6. Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее.
# Подсказка: используйте функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Предусмотрите условие его завершения.
# #### Например, в первом задании выводим целые числа, начиная с 3.
# # При достижении числа 10 — завершаем цикл.
# # Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.
from itertools import count
for el in count(3):
    if el > 10:
        break
    else:
        print(el)
from itertools import cycle
ls = ['ABC', 'DEF', 3]
c = 0
for i in cycle(ls):
       if c > 8:
           break
       print(i)
       c +=1

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция вызывается следующим образом: for el in fact(n).
#     Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(n):
        f = 1
        for x in range(1,n+1):
            f=f*x
            yield f
n = int(input("Введите число: "))
for el in fact(n):
        print(el)